name: Deploy Laravel Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    env:
      ADMIN_EMAIL: ${{ vars.ADMIN_EMAIL }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, pdo, pdo_mysql
        tools: composer

    - name: Prepare environment file
      run: |
        cp .env.example .env
        sed -i 's|^APP_ENV=.*|APP_ENV=${{ env.APP_ENV }}|' .env
        sed -i 's|^APP_URL=.*|APP_URL=${{ env.APP_URL }}|' .env
        sed -i 's|^DB_DATABASE=.*|DB_DATABASE=${{ env.DB_DATABASE }}|' .env
        sed -i 's|^DB_USERNAME=.*|DB_USERNAME=${{ env.DB_USERNAME }}|' .env
        sed -i 's|^DB_PASSWORD=.*|DB_PASSWORD=${{ env.DB_PASSWORD }}|' .env
        sed -i 's|^ADMIN_EMAIL=.*|ADMIN_EMAIL=${{ env.ADMIN_EMAIL }}|' .env

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader --no-dev

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 20.x

    - name: Get yarn cache directory
      id: yarn-cache
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Cache yarn dependencies
      uses: actions/cache@v2
      with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

    - name: Install Node.js dependencies
      run: yarn install --frozen-lockfile --check-files

    - name: Build assets
      run: yarn build

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

    - name: Ensure deploy path exists on the server
      run: |
        ssh -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} << EOF
          set -e
          mkdir -p $DEPLOYPATH
        EOF

    - name: Sync application files to the server
      run: |
        rsync -avz --delete-after --exclude='.git' --exclude='.github' --exclude='tests' --exclude='storage' $GITHUB_WORKSPACE/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:${{ env.DEPLOYPATH }}

    - name: Create symlink and set permissions on the server
      run: |
        ssh -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} << EOF
          set -e
          ln -sfn $DEPLOYPATH /home/schnupf1/www/${{ env.APP_ENV }}
          chmod 755 $DEPLOYPATH
        EOF

    - name: Ensure storage and cache directories exist and have proper permissions
      run: |
        ssh -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} << EOF
          set -e
          cd $DEPLOYPATH
          mkdir -p storage/framework/{sessions,views,cache}
          mkdir -p bootstrap/cache
          chmod -R 755 storage
          chmod -R 755 bootstrap/cache
        EOF

    - name: Run database migrations and optimizations on the server
      run: |
        ssh -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} << EOF
          set -e
          cd $DEPLOYPATH
          /opt/cpanel/ea-php82/root/usr/bin/php artisan migrate --force
        EOF
